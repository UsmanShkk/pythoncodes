class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append(v)

    def dfs_iterative(self, start):
        visited = set()
        stack = [start]

        while stack:
            node = stack.pop()
            if node not in visited:
                print(f'Visiting node: {node}')
                visited.add(node)
                neighbors = self.graph.get(node, [])
                for neighbor in neighbors:
                    if neighbor not in visited:
                        stack.append(neighbor)

g = Graph()
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(2, 4)
g.add_edge(3, 5)
g.add_edge(4, 6)
g.add_edge(5, 6)

print("Iterative DFS Traversal:")
g.dfs_iterative(1)
